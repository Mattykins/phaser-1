import { IBaseWorld } from '../world/IBaseWorld';
import { IBoundsComponent } from '../components/bounds/IBoundsComponent';
import { ICanvasRenderer } from '../renderer/canvas/ICanvasRenderer';
import { IEventInstance } from '../events/IEventInstance';
import { IGameObject } from './IGameObject';
import { IInputComponent } from '../components/input/IInputComponent';
import { IRenderPass } from '../renderer/webgl1/renderpass/IRenderPass';
import { Matrix2D } from '../math/mat2d/Matrix2D';
import { Rectangle } from '../geom/rectangle/Rectangle';
import { Vec2 } from '../math/vec2/Vec2';
import { Vertex } from '../components/Vertex';
export declare class GameObject implements IGameObject {
    type: string;
    name: string;
    world: IBaseWorld;
    parent: IGameObject;
    children: IGameObject[];
    events: Map<string, Set<IEventInstance>>;
    willUpdate: boolean;
    willUpdateChildren: boolean;
    willRender: boolean;
    willRenderChildren: boolean;
    willCacheChildren: boolean;
    dirty: number;
    dirtyFrame: number;
    localTransform: Matrix2D;
    worldTransform: Matrix2D;
    transformData: Float32Array;
    transformExtent: Rectangle;
    bounds: IBoundsComponent;
    input: IInputComponent;
    vertices: Vertex[];
    visible: boolean;
    constructor(x?: number, y?: number);
    isRenderable(): boolean;
    isDirty(flag: number): boolean;
    clearDirty(flag: number): this;
    setDirty(flag: number, flag2?: number): this;
    update(delta: number, time: number): void;
    postUpdate(delta: number, time: number): void;
    renderGL<T extends IRenderPass>(renderPass: T): void;
    renderCanvas<T extends ICanvasRenderer>(renderer: T): void;
    postRenderGL<T extends IRenderPass>(renderPass: T): void;
    postRenderCanvas<T extends ICanvasRenderer>(renderer: T): void;
    get numChildren(): number;
    getBounds(): Rectangle;
    updateTransform(flag: number, value: number): void;
    updateLocalTransform(): void;
    updateWorldTransform(): void;
    setExtent(x: number, y: number, width: number, height: number): void;
    updateExtent(width?: number, height?: number): void;
    setSize(width: number, height?: number): this;
    setPosition(x: number, y: number): this;
    setSkew(x: number, y?: number): this;
    setScale(x: number, y?: number): this;
    setRotation(value: number): this;
    setOrigin(x: number, y?: number): this;
    getSize(out?: Vec2): Vec2;
    getPosition(out?: Vec2): Vec2;
    getOrigin(out?: Vec2): Vec2;
    getSkew(out?: Vec2): Vec2;
    getScale(out?: Vec2): Vec2;
    getRotation(): number;
    set width(value: number);
    get width(): number;
    set height(value: number);
    get height(): number;
    set x(value: number);
    get x(): number;
    set y(value: number);
    get y(): number;
    set originX(value: number);
    get originX(): number;
    set originY(value: number);
    get originY(): number;
    set skewX(value: number);
    get skewX(): number;
    set skewY(value: number);
    get skewY(): number;
    set scaleX(value: number);
    get scaleX(): number;
    set scaleY(value: number);
    get scaleY(): number;
    set rotation(value: number);
    get rotation(): number;
    set passthru(value: boolean);
    get passthru(): boolean;
    destroy(reparentChildren?: IGameObject): void;
}
//# sourceMappingURL=GameObject.d.ts.map